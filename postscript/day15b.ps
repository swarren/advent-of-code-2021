%!PS-Adobe-3.0

/read_parse_input {
    2 dict begin
    /Fd (../input/day15.txt) (r) file def
    /Buffer 256 string def
    [
        {
            Fd Buffer readline
            not { pop exit } if
            [ exch { 48 sub } forall ]
        } loop
    ]
    Fd closefile
    end
} def

/vec_create {
    [
        0       %% used size
        2 array %% array storage
    ]
} def

/vec_get {
    %% vec index
    exch
    %% index vec
    aload
    %% index vec.size vec.array
    exch 2 index
    %% index vec.array vec.size index
    le { /rangecheck signalerror } if
    %% index vec.array
    exch get
    %% vec.array[index]
} def

/_vec_inc_size {
    %% vec
    dup 0 get
    %% vec vec.size
    1 add
    %% vec vec.new_size
    0 exch put
    %%
} def

/_vec_ensure_phys_size {
    %% vec
    aload
    %% vec.size vec.array vec
    3 1 roll
    %% vec vec.size vec.array
    dup length
    %% vec vec.size vec.array vec.array.length
    3 -1 roll
    %% vec vec.array vec.array.length vec.size
    lt {
        %% vec vec.array
        dup length 2 mul array
        %% vec vec.array new_array
        dup 0 3 index
        %% vec vec.array new_array new_array 0 vec.array
        putinterval
        %% vec vec.array new_array
        exch pop
        %% vec new_array
        1 exch
        %% vec 1 new_array
        put
        %%
    } {
        %% vec vec.array
        pop pop
        %%
    } ifelse
    %%
} def

/vec_push_back {
    %% vec item
    exch
    %% item vec
    dup _vec_inc_size
    dup _vec_ensure_phys_size
    %% item vec
    aload pop
    %% item vec.size vec.array
    exch 1 sub
    %% item vec.array index
    3 -1 roll put
    %%
} def

/coord_create {
    %% x y
    [ 3 1 roll ]
    %% coord
} def

/coord_copy_and_move {
    %% path offset
    aload pop
    %% path offset.x offset.y
    3 -1 roll
    %% offset.x offset.y path
    aload pop
    %% offset.x offset.y path.x path.y
    3 -1 roll
    %% offset.x path.x path.y offset.y
    add
    %% offset.x path.x new_y
    3 1 roll
    %% new_y offset.x path.x
    add
    %% new_y new_x
    exch coord_create
    %% new_coord
} def

/coord_state_create {
    %% coord path_cost
    [ 3 1 roll false null null ]
    %% coord_state
} def

/coord_state_get_coord {
    %% coord_state
    0 get
    %% coord_state.coord
} def

/coord_state_get_path_cost {
    %% coord_state
    1 get
    %% coord_state.path_cost
} def

/coord_state_set_path_cost {
    %% coord_state new_path_cost
    1 exch put
    %%
} def

/coord_state_get_visited {
    %% coord_state
    2 get
    %% coord_state.visited
} def

/coord_state_set_visited {
    %% coord_state new_visited
    2 exch put
    %%
} def

/coord_state_get_next {
    %% coord_state
    3 get
    %% coord_state.next
} def

/coord_state_set_next {
    %% coord_state new_next
    3 exch put
    %%
} def

/coord_state_get_prev {
    %% coord_state
    4 get
    %% coord_state.prev
} def

/coord_state_set_prev {
    %% coord_state new_prev
    4 exch put
    %%
} def

/coord_states_get {
    %% coord
    aload pop
    %% coord.x coord.y
    CoordStates exch get
    %% coord.x coord_states_row
    exch get
    %% coord_state
} def

/_coords_unvisited_insert_empty {
    %% coord_state
    dup null coord_state_set_next
    %% coord_state
    dup null coord_state_set_prev
    %% coord_state
    /CoordsUnvisited exch store
    %%
} def

/_coords_unvisited_insert_non_empty {
    %% coord_state prev next
    2 index coord_state_get_path_cost
    %% coord_state prev next coord_state.path_cost
    3 1 roll
    %% coord_state coord_state.path_cost prev next
    {
        %% coord_state coord_state.path_cost prev next
        dup null eq {
            exit
        } if
        %% coord_state coord_state.path_cost prev next
        dup coord_state_get_path_cost
        %% coord_state coord_state.path_cost prev next next.path_cost
        3 index ge {
            %% coord_state coord_state.path_cost prev next
            exit
        } if
        %% coord_state coord_state.path_cost prev next
        exch pop
        %% coord_state coord_state.path_cost orig_next/next_prev
        dup coord_state_get_next
        %% coord_state coord_state.path_cost orig_next/next_prev next_next
    } loop
    %% coord_state coord_state.path_cost prev next
    3 -1 roll pop
    %% coord_state prev next
    3 -1 roll
    %% prev next coord_state
    dup 3 index coord_state_set_prev
    %% prev next coord_state
    dup 2 index coord_state_set_next
    %% prev next coord_state
    dup
    %% prev next coord_state coord_state
    3 1 roll
    %% prev coord_state next coord_state
    1 index null ne {
        %% prev coord_state next coord_state
        coord_state_set_prev
        %% prev coord_state
    } {
        %% prev coord_state next coord_state
        pop pop
        %% prev coord_state
    } ifelse
    %% prev coord_state
    1 index null ne {
        %% prev coord_state
        coord_state_set_next
        %%
    } {
        %% prev coord_state
        pop pop
        %%
    } ifelse
    %%
} def

/coords_unvisited_insert {
    %% coord_state
    {
        %% coord_state
        CoordsUnvisited null eq {
            %% coord_state
            _coords_unvisited_insert_empty
            %%
            exit
        } if
        %% coord_state
        dup null CoordsUnvisited _coords_unvisited_insert_non_empty
        %% coord_state
        dup coord_state_get_prev null eq {
            dup /CoordsUnvisited exch store
        } if
        %% coord_state
        pop
        %%
        exit
    } loop
    %%
} def

/dump_unvisited {
    CoordsUnvisited
    0 1 4 {
        pop
        dup coord_state_get_coord ==
        dup coord_state_get_path_cost ==
        coord_state_get_next
    } for
    pop
} def

/coords_unvisited_is_empty {
    CoordsUnvisited null eq
} def

/coords_unvisited_remove {
    %% coord_state
    dup coord_state_get_next
    %% coord_state next
    1 index coord_state_get_prev
    %% coord_state next prev
    2 index null coord_state_set_next
    %% coord_state next prev
    2 index null coord_state_set_prev
    %% coord_state next prev
    1 index null ne {
        1 index 1 index coord_state_set_prev
    } if
    %% coord_state next prev
    dup null ne {
        dup 2 index coord_state_set_next
    } if
    %% coord_state next prev
    pop
    %% coord_state next
    1 index CoordsUnvisited eq {
        %% coord_state next
        /CoordsUnvisited exch store
        %% coord_state
    } {
        %% coord_state next
        pop
        %% coord_state
    } ifelse
    %% coord_state
    pop
    %%
} def

/coords_unvisited_pop_head {
    %%
    CoordsUnvisited
    %% head
    dup coords_unvisited_remove
    %% head
} def

/input_get_cost {
    %% coord
    aload pop
    %% coord.x coord.y
    Input exch get
    %% coord.x input_row
    exch get
    %% input/cost
} def

/InputTile read_parse_input def
/InputSizeTile InputTile length def
/TileNum 5 def
/InputSize InputSizeTile TileNum mul def
/MinCoord 0 def
/MaxCoord InputSize 1 sub def

/Input [
    0 1 MaxCoord { pop InputSize array } for
] def

0 1 MaxCoord {
    %% rowIndex
    0 1 MaxCoord {
        %% rowIndex colIndex
        1 index InputSizeTile mod
        %% rowIndex colIndex tileRowIndex
        InputTile exch get
        %% rowIndex colIndex tileRow
        1 index InputSizeTile mod
        %% rowIndex colIndex tileRow tileColIndx
        get
        %% rowIndex colIndex cost
        2 index InputSizeTile idiv
        %% rowIndex colIndex cost tileY
        2 index InputSizeTile idiv
        %% rowIndex colIndex cost tileY tileX
        add
        %% rowIndex colIndex cost cost_delta
        add 1 sub 9 mod 1 add
        %% rowIndex colIndex new_cost
        2 index Input exch get
        %% rowIndex colIndex new_cost inputRow
        3 1 roll
        %% rowIndex inputRow colIndex new_cost
        put
        %% rowIndex
    } for
    %% rowIndex
    pop
    %%
} for

/CoordStates [
    0 1 MaxCoord {
        %% row_id
        [ exch
            %% row_id
            0 1 MaxCoord {
                %% row_id col_id
                1 index
                %% row_id col_id row_id
                coord_create 4294967295 coord_state_create
                %% row_id path
                exch
                %% path row_id
            } for
            %% path row_id
            pop
            %% path
        ]
        %% row
    } for
    %% row
] def
0 0 coord_create coord_states_get 0 coord_state_set_path_cost

/CoordsUnvisited null def
MaxCoord -1 0 {
    %% row_id
    CoordStates exch get
    %% row
    MaxCoord -1 0 {
        %% row col_id
        1 index exch
        %% row row col_id
        get
        %% row coord_state
        coords_unvisited_insert
        %% row
    } for
    %% row
    pop
    %%
} for

/Moves [
     1  0 coord_create
    -1  0 coord_create
     0  1 coord_create
     0 -1 coord_create
] def

/next_coords {
    %% coord
    [ exch
        Moves {
            %% coord delta
            1 index
            %% coord delta coord
            coord_copy_and_move exch
            %% new_coord coord
        } forall
        %% new_coord... coord
        pop
        %% new_coord...
    ]
} def

/coord_is_valid {
    %% coord
    {
        %% coord
        dup 0 get MinCoord lt { false exit } if
        %% coord
        dup 0 get MaxCoord gt { false exit } if
        %% coord
        dup 1 get MinCoord lt { false exit } if
        %% coord
        dup 1 get MaxCoord gt { false exit } if
        %% coord
        true exit
    } loop
    %% coord is_valid
    exch pop
} def

/next_coords_states_valid {
    %% coord
    [ exch
        %% coord
        next_coords {
            %% next_coord
            {
                %% next_coord
                dup coord_is_valid not {
                    pop exit
                } if
                %% next_coord
                coord_states_get
                %% next_coord_state
                dup coord_state_get_visited {
                    pop exit
                } if
                %% next_coord_state
                exit
            } loop
            %% next_coord_state
            %% or empty
        } forall
    ]
} def

/coord_state_is_target {
    %% coord_state
    coord_state_get_coord
    %% coord
    aload pop
    %% coord.x coord.y
    {
        %% coord.x coord.y
        MaxCoord ne { pop false exit } if
        %% coord.x
        MaxCoord ne { false exit } if
        %%
        true exit
    } loop
    %% is_target
} def

{
    %%
    coords_unvisited_is_empty { exit } if
    %%
    coords_unvisited_pop_head
    %% src_coord_state
    dup null eq { pop exit } if
    %% src_coord_state
    dup true coord_state_set_visited
    %% src_coord_state
    dup coord_state_is_target { pop exit } if
    %% src_coord_state
    dup coord_state_get_path_cost
    %% src_coord_state src_path_cost
    exch
    %% src_path_cost src_coord_state
    coord_state_get_coord
    %% src_path_cost src_coord
    next_coords_states_valid {
        %% src_path_cost dst_coord_state
        %% src_path_cost dst_coord_state
        dup coord_state_get_coord
        %% src_path_cost dst_coord_state dst_coord
        input_get_cost
        %% src_path_cost dst_coord_state dst_cost
        2 index add dup
        %% src_path_cost dst_coord_state new_dst_path_cost new_dst_path_cost
        2 index coord_state_get_path_cost
        %% src_path_cost dst_coord_state new_dst_path_cost new_dst_path_cost old_dst_path_cost
        lt {
            %% src_path_cost dst_coord_state new_dst_path_cost
            1 index 3 1 roll
            %% src_path_cost dst_coord_state dst_coord_state new_dst_path_cost
            coord_state_set_path_cost
            %% src_path_cost dst_coord_state
            dup coords_unvisited_remove
            %% src_path_cost dst_coord_state
            coords_unvisited_insert
            %% src_path_cost dst_coord_state
        } {
            %% src_path_cost dst_coord_state new_dst_path_cost
            pop pop
            %% src_path_cost
        } ifelse
        %% src_path_cost
    } forall
    %% src_path_cost
    pop
    %%
} loop
MaxCoord MaxCoord coord_create coord_states_get coord_state_get_path_cost =
